{"version":3,"sources":["Components/Todos/Todo.tsx","Components/Loader/Loader.tsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","useState","isOpen","setOpen","className","duration","easing","todos","map","todo","index","classes","completed","push","key","id","style","display","alignItems","width","join","checked","outline","cursor","border","type","onChange","onToggle","e","updateTodo","target","value","title","margin","onClick","deleteTodo","deleteAllTodos","justifyContent","AddTodo","React","lazy","App","setTodo","load","setLoad","useEffect","fetch","then","response","json","Suspense","fallback","Loader","onAddTodo","concat","Date","now","length","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43c08c67.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FlipMove from 'react-flip-move'\r\nimport './Todo.css'\r\n\r\ntype TodoType = {\r\n    id: number,\r\n    completed: boolean,\r\n    title: string\r\n}\r\n\r\ntype PropsType = {\r\n    todos: Array<TodoType>,\r\n    onToggle: (id: number) => void,\r\n    deleteTodo: (id: number) => void,\r\n    updateTodo: (target: any, id: number) => void,\r\n    deleteAllTodos: () => void\r\n}\r\n\r\nconst Todo = (props: PropsType) => {\r\n\r\n    const [isOpen, setOpen] = useState(false)\r\n\r\n    return (\r\n        <div className=\"todoWrapper\">\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n                {\r\n                    props.todos.map((todo, index) => {\r\n\r\n                        const classes: Array<any> = []\r\n\r\n                        if (todo.completed) {\r\n                            classes.push('completed')\r\n                        }\r\n                        return (\r\n                            <div key={todo.id} className=\"todoItems\" >\r\n\r\n                                <span style={{ display: 'flex', alignItems: 'center', width: '95%' }} className={classes.join('  ')}>\r\n                                    <label className=\"container\">\r\n                                        <input\r\n                                            checked={todo.completed}\r\n                                            style={{ outline: \"none\", cursor: \"pointer\", border: \"50%\" }}\r\n                                            type=\"checkbox\"\r\n                                            onChange={() => props.onToggle(todo.id)} />\r\n                                        <span className=\"checkmark\"></span>\r\n                                    </label>\r\n                                    <strong>{index + 1}</strong>\r\n                                &nbsp;\r\n                                <input\r\n                                        className=\"textInput\"\r\n                                        type=\"text\"\r\n                                        onChange={(e) => props.updateTodo(e.target.value, todo.id)}\r\n                                        key={todo.id}\r\n                                        value={todo.title}\r\n                                    />\r\n                                </span>\r\n                                {\r\n                                    isOpen && <div className=\"modal\">\r\n                                        <div className=\"modal__body\">\r\n                                            <h1>Are you sure you want to delete todo`{index + 1}`?</h1>\r\n                                            <button className=\"modal__button\"\r\n                                                style={{ margin: '15px 0' }}\r\n                                                onClick={() => {\r\n                                                    props.deleteTodo(todo.id);\r\n                                                    setOpen(false)\r\n                                                }}>Yes</button>\r\n                                            <button className=\"modal__button\"\r\n                                                onClick={() => setOpen(false)}\r\n                                                style={{ margin: '15px 10px' }}>No</button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                                <button className=\"deleteTodo\" onClick={() => { setOpen(true) }}>&times;</button>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <button className=\"addTodoButton\" style={{ margin: '20px 0' }} onClick={() => props.deleteAllTodos()}>Delete all</button>\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React from 'react'\r\n\r\nexport default () => <div style={{ display: 'flex', justifyContent: 'center', margin: '10px' }}><div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Todo from './Components/Todos/Todo'\nimport Loader from './Components/Loader/Loader'\n\nconst AddTodo = React.lazy(() => import('./Components/AddTodo/AddTodo'))\n\nfunction App() {\n\n  let [todos, setTodo] = useState([])\n  const [load, setLoad] = useState(true)\n\n  useEffect(() => {\n\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n        setTodo(todos)\n        setLoad(false)\n      })\n  }, [])\n\n  const onToggle = (id) => {\n    setTodo(todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    }))\n  }\n\n  const deleteTodo = (id) => {\n    setTodo(todos.filter(todo => todo.id !== id))\n  }\n\n  const deleteAllTodos = () => {\n    setTodo(todos = [])\n  }\n\n  const onAddTodo = (title) => {\n    setTodo(todos.concat([\n      {\n        title,\n        id: Date.now(),\n        completed: false\n      }\n    ]))\n  }\n\n  const updateTodo = (title, id) => {\n    setTodo(todos.map(todo => {\n      if (todo.id === id) {\n        todo.title = title\n      }\n      return todo\n    }))\n  }\n\n  return (\n    <div className=\"App\">\n      <React.Suspense fallback={<Loader />}>\n        <AddTodo onAddTodo={onAddTodo} />\n      </React.Suspense>\n      {load && <Loader />}\n      {todos.length ? (\n        <Todo className=\"Todo\" todos={todos} onToggle={onToggle} deleteTodo={deleteTodo} deleteAllTodos={deleteAllTodos} updateTodo={updateTodo} />)\n        : (load ? null\n          : <h1>No todos</h1>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}